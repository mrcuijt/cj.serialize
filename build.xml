<project xmlns:ivy="antlib:org.apache.ivy.ant"
         xmlns="antlib:org.apache.tools.ant"
         name="cj.serialize" default="test" basedir=".">

  <property file="version.properties"/>
  <property name="final.name" value="serialize-${target.serialize.version}.jar"/>
  <property name="ivy.install.version" value="2.5.0"/>
  <property name="ivy.home" value="${user.home}/.ivy2"/> 
  <property name="ivy.jar.dir" value="${basedir}/ivy"/>
  <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>
  <property name="ivy.settings.file" value="${basedir}/ivysettings.xml"/>

  <property name="src.dir" value="src/java"/>
  <property name="test.dir" value="src/test"/>
  <property name="build.dir" value="build"/>
  <property name="dist.dir" value="dist"/>
  <property name="docs.dir" value="docs"/>
  <property name="lib.dir" value="lib"/>
  <property name="exart.lib.dir" value="exart"/>

  <!-- Download java2html plugin http://www.java2html.de/download.html
       add java2html.jar to ant/lib
   -->
  <taskdef name="java2html"
      classname="de.java2html.anttasks.Java2HtmlTask"
      classpath="${build.dir}"
  />

  <target name="download-ivy" unless="skip.download">
    <mkdir dir="${ivy.jar.dir}"/>
    <!-- download Ivy from web site so that it can be used even without any special installation -->
    <echo message="installing ivy..."/>
    <!-- https://repo1.maven.org/maven2 -->
    <!-- https://maven.aliyun.com/repository/public -->
    <get src="https://maven.aliyun.com/repository/public/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
         dest="${ivy.jar.file}" usetimestamp="true"/>
  </target>

  <target name="install-ivy" depends="download-ivy" description="--> install ivy">
    <!-- try to load Ivy here from local Ivy dir, in case the user has not already dropped
       it into Ant's lib dir (note that the latter copy will always take precedence).
       We will not fail as long as local lib dir exists (it may be empty) and
       Ivy is in at least one of Ant's lib dir or the local lib dir. -->
    <path id="ivy.lib.path">
      <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
    </path>
    <taskdef resource="org/apache/ivy/ant/antlib.xml"
             uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
  </target>

  <!-- <ivy:settings file="${user.home}/.ivy2/ivysettings-public.xml" /> -->
  <!-- <ivy:settings file="${basedir}/ivysettings.xml" /> -->
  <target name="resolve" depends="install-ivy" description="--> retreive dependencies with ivy">
    <!-- conf="*" will copy artifacts defined for each conf in a dir matching conf name -->
    <ivy:retrieve pattern="${ivy.lib.dir}/[conf]/[artifact]-[revision].[ext]"/>
  </target>

  <target name="report" depends="resolve" description="--> generates a report of dependencies">
    <ivy:report todir="${build.dir}"/>
  </target>

  <target name="clean">
    <delete verbose="true" dir="${build.dir}" />
    <delete verbose="true" dir="${docs.dir}" />
    <delete verbose="true" dir="${dist.dir}" />
  </target>

  <target name="makedir">
    <mkdir dir="${src.dir}/.." />
    <mkdir dir="${src.dir}" />
    <mkdir dir="${test.dir}" />
    <mkdir dir="${build.dir}" />
    <mkdir dir="${build.dir}/classes" />
    <mkdir dir="${build.dir}/test-classes" />
    <mkdir dir="${docs.dir}" />
    <mkdir dir="${dist.dir}" />
    <mkdir dir="${lib.dir}" />
    <mkdir dir="${exart.lib.dir}" />
  </target>

  <!-- paths used for compilation and run  -->
  <path id="compile.path.id">
    <fileset dir="${lib.dir}/compile"/>
  </path>
  <path id="lib.run.test.id">
    <path location="${build.dir}/classes"/>
    <path location="${build.dir}/test-classes"/>
    <fileset dir="${lib.dir}/test"/>
  </path>

  <property name="verbose" value="false"/>
  <target name="compile" depends="clean, makedir, resolve"
            description="--> resolve dependencies, compile and run the project">
    <!-- classpathref="compile.path.id" -->
    <javac 
           includeAntRuntime="false"
           srcdir="${src.dir}"
           destdir="${build.dir}/classes"
           encoding="utf-8"
           debug="true"
           debuglevel="lines,source"
           verbose="${verbose}">
    </javac>
    <copy todir="${build.dir}/classes">
      <fileset dir="${src.dir}" includes="**/*.properties"/>
    </copy>
  </target>

  <!-- Creates Javadoc -->
  <target name="docs" depends="compile">
    <javadoc packagenames="src" encoding="utf-8" sourcepath="${src.dir}" destdir="${docs.dir}">
      <!-- Define which files / directory should get included, we include all -->
       <fileset dir="${src.dir}">
         <include name="**" />
       </fileset>
    </javadoc>
  </target>

  <target name="test" depends="compile">
    <javac classpathref="lib.run.test.id"
           includeAntRuntime="false"
           srcdir="${test.dir}"
           destdir="${build.dir}/test-classes"
           encoding="utf-8"
           debug="true"
           debuglevel="lines,source">
    </javac>
    <copy todir="${build.dir}">
      <fileset dir="${src.dir}" includes="**/*.properties"/>
    </copy>
    <java classpathref="lib.run.test.id"
          classname="cj.serialize.EntitySerialTest" fork="true"></java>
  </target>

  <!-- Creates the deployable jar file -->
  <target name="jar" depends="compile">
    <jar destfile="${dist.dir}\${final.name}" basedir="${build.dir}/classes">
      <manifest></manifest>
    </jar>
  </target>

  <target name="html" depends="">
    <mkdir dir="${build.dir}" />
    <mkdir dir="${build.dir}/html" />
    <java2html
           srcdir="${src.dir}"
           destdir="${build.dir}/html"
           includes="**/*.java"
           style="eclipse"
           showLineNumbers="true"
           showFileName="true"
           showTableBorder="true"
    />
  </target>

</project>
